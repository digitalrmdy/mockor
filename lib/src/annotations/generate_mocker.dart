///the annotation to be place on your mock method.
class GenerateMocker {
  /// the types to generate Mock classes for
  final List<Type> types;

  /// if **true**, no mocks will be generated by this builder
  /// but will use the names of classes generated by Mockito.
  ///
  /// if **false**, simple one line mock classes will be generated
  /// which can be useful for Mocktail.
  ///
  /// **true** by default
  final bool useMockitoGeneratedTypes;

  /// if **true**, Mockito's own `@GenerateMocks` annotation will be added to
  /// the generated mock method. [useMockitoGeneratedTypes] must be **true** as well.
  ///
  /// if **false** but [useMockitoGeneratedTypes] is **true**,
  /// then you should include a `@GenerateMocks` to the mock method yourself.
  ///
  /// **true** by default
  final bool generateMockitoAnnotation;

  /// Generate an `asMock` extension method for all [types] which casts it as
  /// the generated mock type.
  /// Due to null safety we can only use the `any` matcher on non null params when using the mocked type.
  /// Please read Mockito's [Null Safety README](https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md) for more info.
  ///
  /// When using `mocktail`, should be set to `false`
  ///
  /// **true** by default
  final bool generateMockExtensions;

  /// options for [mocktail](https://pub.dev/packages/mocktail).
  /// null by default
  final GenerateMocktailFallbackValues? generateMocktailFallbackValues;

  const GenerateMocker(
    this.types, {
    this.useMockitoGeneratedTypes = true,
    this.generateMockitoAnnotation = true,
    this.generateMockExtensions = true,
    this.generateMocktailFallbackValues,
  });
}

///
/// generate method with `registerFallbackValues` calls,
/// this is needed to make the `any()` function work in mocktail](https://pub.dev/packages/mocktail).
///
class GenerateMocktailFallbackValues {
  final List<Type> types;

  /// NOTE: experimental feature.
  /// Register a mock class for all the non primitive parameters of all the methods in each class of [GenerateMocker.types]
  /// Classes with type parameters will be ignored.
  /// If a class didn't get picked up, please add it manually in [types].
  /// Find the generated method in `<filename>.fallback.dart`.
  final bool autoDetect;

  const GenerateMocktailFallbackValues(this.types, {this.autoDetect = false});
}
